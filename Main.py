def debutDuJeux():
    print("------------")
    print("----Jeux----")
    print("------------")
    nomJoueur = str(input("Bonjour anonyme joueur, comment te prénommes-tu ? "))
    print()
    print("Bonjour " + str(nomJoueur) + " !")
    print()
    print("Bienvenue sur ce jeu de survie, l'objectif est de ce déplacer sur la carte et d'atteindre different point,")
    print("d'y accomplir des quètes, de les reussir afin de gagner des clefs, et enfin d'atteindre la porte mysterieuse,0")
    print("et de l'ouvrir a l'aide de vos clefs")
    print()
    print("Vous allez voir apparaitre une carte, les # * V ~ et † coresponde a des decorts, vous ne pouvez pas marcher dessus")
    print("# = bord du terrain, * = foret, V = montagne, † = desert")
    print("Pour vous deplacer le jeux vas vous demander ou vous souhaitez aller et vous devrez lui repondre")
    print("Vous pourrez repondre par 'z' pour haut, 's' pour bas, 'q' pour gauche, 'd' pour droite ")
    print("si vous souhaitez revoir vos touche saisissez 'touche'")
    print("pour revoir les règles, saississez 'regle'")
    return nomJoueur

def printRegle():
    print()
    print("Bienvenue sur ce jeux de survie, l'objectif est de ce déplacer sur la carte et d'atteindre different point,")
    print("d'y accomplir des quètes, de les reussir afin de gagner des clefs, et enfin d'atteindre la porte mysterieuse,0")
    print("et de l'ouvrir a l'aide de vos clefs")
    print()
    print("Vous allez voir apparaitre une carte, les # * V ~ et † coresponde a des decorts, vous ne pouvez pas marcher dessus")
    print("# = bord du terrain, * = foret, V = montagne, † = desert")
    print("Pour vous deplacer le jeux vas vous demander ou vous souhaitez aller et vous devrez lui repondre")
    print("Vous pourrez repondre par 'haut', 'bas', 'gauche', droite")
    print("si vous souhaitez revoir vos touche saisissez 'touche'")
    print("pour revoir les règles, saississez 'regle'")
    print()



def printTouche():
    print("Pour vous deplacer saisissez 'haut', 'bas', 'gauche', 'droite' vers une direction disponible ! ")

# def the map
def printMap (y, x):
    map1 = [["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "V", "V", "V", "V", "V", "V", "V", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", "~", "~", "~", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "†", " ", "†", " ", "†", " ", "V", "V", "V", "V", "V", "V", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", " ", " ", "~", " ", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "†", " ", "†", " ", "†", " ", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", " ", " ", "~", " ", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "†", " ", "†", " ", "†", " ", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", " ", " ", "~", " ", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "†", " ", "†", " ", "†", " ", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", "~", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", " ", " ", "~", " ", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "~", "~", "~", " ", " ", " ", " ", " ", " ", " ", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", "*", " ", " ", " ", "~", "~", "~", "~", "~", " ", " ", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "#"],
    ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"]]

    compteur1 = 0
    print()
    while compteur1 < 32:
        compteur2 = 0
        ligne = ""
        while compteur2 < 52:
            if compteur1 == y and compteur2 == x:
                ligne = str(ligne) + "@"
            else:
                ligne = str(ligne) + str(map1[compteur1][compteur2])
            compteur2 = compteur2 + 1
        compteur1 = compteur1 + 1
        print(ligne)
    print()
    print()



def checkDeplacement(y, x, deplacement):
    mapBinaire = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    if direction == "haut":
        y = y - 1
    elif direction == "bas":
        y = y + 1
    elif direction == "gauche":
        x = x - 1
    elif direction == "droite":
        x = x + 1

    if mapBinaire[y][x] == 1:
        return "ok"
    else:
        return "ko"

def gameOver():
    print()
    print("GAME OVER")
    print()	
    print("                      :::!~!!!!!:.")
    print("                  .xUHWH!! !!?M88WHX:.")
    print("                .X*#M@$!!  !X!M$$$$$$WWx:.")
    print("               :!!!!!!?H! :!$!$$$$$$$$$$8X:")
    print("              !!~  ~:~!! :~!$!#$$$$$$$$$$8X:")
    print("             :!~::!H!<   ~.U$X!?R$$$$$$$$MM!")
    print("             ~!~!!!!~~ .:XW$$$U!!?$$$$$$RMM!")
    print("               !:~~~ .:!M'T#$$$$WX??#MRRMMM!")
    print("               ~?WuxiW*`   `'#$$$$8!!!!??!!!")
    print("             :X- M$$$$       `'T#$T~!8$WUXU~")
    print("            :%`  ~#$$$m:        ~!~ ?$$$$$$")
    print("          :!`.-   ~T$$$$8xx.  .xWW- ~''##*'")
    print(".....   -~~:<` !    ~?T#$$@@W@*?$$      /`")
    print("W$@@M!!! .!~~ !!     .:XUW$W!~ `'~:    :")
    print("#'~~`.:x%`!!  !H:   !WM$$$$Ti.: .!WUn+!`")
    print(":::~:!!`:X~ .: ?H.!u '$$$B$$$!W:U!T$$M~")
    print(".~~   :X@!.-~   ?@WTWo('*$$$W$TH$! `")
    print("Wi.~!X$?!-~    : ?$$$B$Wu('**$RM!")
    print("$R@i.~~ !     :   ~$$$$$B$$en:``")
    print("?MXT@Wx.~    :     ~'##*$$$$M~")
    print()
    print()

# Call all the function*
nomJoueur = debutDuJeux()
reponse = ["oui", "yes", "si"]
question = str(input("Est ce que vous êtes pret ? "))
while question not in reponse:
    question = str(input("Prenez votre temps et dite moi quand vous serez prêt ! "))
print()
avatar = 0
statSoif = 100
statFaim = 100
statSommeil = 100
positionJoueurY = 3
positionJoueurX = 10
printMap(positionJoueurY, positionJoueurX)
statutParti = "ok"
directionPossible = ["s", "z", "q", "d", "regle", "touche"]
print()
while statutParti == "ok":
    direction = input("Que souhaitez vous faire ? ")
    while direction not in directionPossible:
        direction = input("Choisissez parmis z, s, q, d, regle ou touche ! ")
    if direction == "regle":
        printRegle()
    elif direction == "touche":
        printTouche()
    else:
        while checkDeplacement(positionJoueurY, positionJoueurX, direction) == "ko":
            direction = input("Vous ne pouvez pas vous deplacer par la, choisissez une autre destination ! ")
        
        if direction == "z":
            positionJoueurY = positionJoueurY - 1
        elif direction == "s":
            positionJoueurY = positionJoueurY + 1
        elif direction == "q":
            positionJoueurX = positionJoueurX - 1
        elif direction == "d":
            positionJoueurX = positionJoueurX + 1
        printMap(positionJoueurY, positionJoueurX)
        statSommeil = statSommeil - 3
        statSoif = statSoif - 2
        statFaim = statFaim - 2
        print(str(nomJoueur) + " voici vos stat, faim = " + str(statFaim) + ", soif = " + str(statSoif) + ", sommeil = " + str(statSommeil))
        if statFaim <= 0 or statSoif <= 0 or statSommeil <= 0:
            statutParti = "ko"
if statutParti == "ko":
    gameOver()

print()